@model MMApp.Domain.Models.Band


@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/modernizr")
@Styles.Render("~/Content/themes/base/css")
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">

@if (Model.Id > 0)
{
    <p>
    @Html.ActionLink("Albums", "Index", "Album", new { bandId = Model.Id, bandName = Model.BandName}, null)
    </p>
}

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @(Html.HiddenFor(model => model.Id))
    
    <table>
        <tr>
            <td colspan="5">&nbsp;</td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.Label("Country")</td>
            <td  class="labelWidth150">
                @Html.DropDownListFor(m => m.CountryId, new SelectList(Model.Countries, "Id", "CountryName", Model.CountryId), "Select Country")
            </td>
            <td class="labelWidth150 labelPadding">@Html.Label("City")</td>
            <td  class="labelWidth150">
                @Html.DropDownListFor(m => m.CityId, new SelectList(Model.Cities, "Id", "CityName", Model.CityId), "Select City")
            </td>
            <td>
                @Html.ValidationMessageFor(city => city.CityId)
            </td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.LabelFor(band => band.BandName)</td>
            <td>@Html.TextBoxFor(band => band.BandName)</td>
            <td class="labelWidth150 labelPadding">@Html.LabelFor(band => band.AlsoKnownAs)</td>
            <td>@Html.TextBoxFor(band => band.AlsoKnownAs)</td>
            <td>@Html.ValidationMessageFor(band => band.BandName)</td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.Label("Genre")</td>
            <td  class="labelWidth150">
                @Html.DropDownListFor(m => m.GenreId, new SelectList(Model.Genres, "Id", "GenreName", Model.GenreId), "Select Genre")
            </td>
            <td class="labelWidth150 labelPadding">@Html.Label("Genres")</td>
            <td  class="labelWidth150">
                @Html.ListBoxFor(genres => genres.SelectedGenres, new SelectList(Model.SelectedGenres, "Id", "GenreName", Model.GenreId), new { size = 10});
            </td>
            <td>
                @Html.ValidationMessageFor(genre => genre.GenreId)
            </td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.Label("Label")</td>
            <td  class="labelWidth150">
                @Html.DropDownListFor(m => m.LabelId, new SelectList(Model.Labels, "Id", "LabelName", Model.LabelId), "Select Label")
            </td>
            <td class="labelWidth150 labelPadding">@Html.Label("Labels")</td>
            <td  class="labelWidth150">
                @Html.ListBoxFor(label => label.SelectedLabels, new SelectList(Model.SelectedLabels, "Id", "LabelName"), new { size = 10});
            </td>
            <td>
                @Html.ValidationMessageFor(label => label.LabelId)
            </td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.Label("Musician")</td>
            <td  class="labelWidth150">
                @Html.DropDownListFor(m => m.MusicianId, new SelectList(Model.Musicians, "Id", "StageName", Model.MusicianId), "Select Musician")
            </td>
            <td class="labelWidth150 labelPadding">@Html.Label("Musicians")</td>
            <td  class="labelWidth150">
                @Html.ListBoxFor(musician => musician.SelectedMusicians, new SelectList(Model.SelectedMusicians, "Id", "StageName"), new { size = 10});
            </td>
            <td>
                @Html.ValidationMessageFor(musician => musician.MusicianId)
            </td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">
                @Html.LabelFor(band => band.YearFrom)
                @Html.LabelFor(band => band.YearTo)
                @Html.Label("Add Activity")
            </td>
            <td>
                @Html.TextBoxFor(band => band.YearFrom)
                @Html.TextBoxFor(band => band.YearTo)
                <input type="button" id="AddActivity" name="AddActivity" value="Add Activity" />
            </td>
            <td class="labelWidth150 labelPadding">@Html.Label("Activities")</td>
            <td colspan="2" class="labelWidth150">
                @Html.ListBoxFor(musician => musician.MusicianActivity, new SelectList(Model.MusicianActivity, "Id", "Activity"), new { size = 10});
            </td>
        </tr>
        <tr>
            <td class="labelWidth150 labelPadding">@Html.LabelFor(band => band.Website)</td>
            <td colspan="2">@Html.TextBoxFor(band => band.Website, new { style = "width:100%;" })</td>
        </tr>
        <tr>
            <td colspan="5">&nbsp;</td>
        </tr>
        <tr>
            <td colspan="5" style="text-align: right">
                    <input type="button" name="Cancel" value="Cancel" onclick="history.back();" />
                    <input type="submit" name="Save" value="Save" />
                </td>
        </tr>
    </table>
}

<script type="text/javascript">
    $(function () {
        $("#StageName").focus();
    });
    $(function() {
        $.ajaxSetup({ cache: false });
    });
</script>
<script>
    $(function() {
        $("#CountryId").change(function() {
            var selectedValue = $(this).val();
            $.getJSON('@Url.Action("GetCities")', { countryId: selectedValue }, function(cities) {
                var citySelect = $("#CityId");
                citySelect.empty();
                citySelect.append(
                    $('<option/>').attr('value', 0).text("Select ...")
                );
                $.each(cities, function(index, city) {
                    citySelect.append(
                        $('<option/>').attr('value', city.Id).text(city.CityName)
                    );
                });
            });
        });
    });
    $(function() {
        $("#GenreId").change(function() {
            var selectedValue = $(this).val();
            $.getJSON('@Url.Action("GetGenre")', { genreId: selectedValue }, function (genre) {
                var genreSelect = $("#SelectedGenres");
                if (genre != undefined) {
                    genreSelect.append($('<option/>').attr('value', genre.Id).text(genre.GenreName));
                }
            }).error(function (jqXHR) {
                alert(jqXHR.responseText);
            });
        });
    });
    $(function() {
        $("#SelectedGenres").dblclick(function() {
            var selectedValue = $(this).val();
            $(this).find("option:selected").remove();
            $.getJSON('@Url.Action("RemoveGenre")', { genreId: parseInt(selectedValue) }, function () {
            }).error(function (jqXHR) {
                alert(jqXHR.responseText);
            });
        });
    });
    $(function () {
        $("#LabelId").change(function () {
            var selectedValue = $(this).val();
            $.getJSON('@Url.Action("GetLabel")', { labelId: selectedValue }, function (label) {
                var labelSelect = $("#SelectedLabels");
                labelSelect.append($('<option/>').attr('value', label.Id).text(label.LabelName));
            });
        });
    });
    $(function () {
        $("#SelectedLabels").dblclick(function () {
            var selectedValue = $(this).val();
            $(this).find("option:selected").remove();
            $.getJSON('@Url.Action("RemoveLabel")', { labelId: parseInt(selectedValue) }, function () {
            }).error(function (jqXHR) {
                alert(jqXHR.responseText);
            });
        });
    });
    $(function () {
        $("#MusicianId").change(function () {
            var selectedValue = $(this).val();
            $.getJSON('@Url.Action("GetMusician")', { musicianId: selectedValue }, function (musician) {
                var labelSelect = $("#SelectedMusicians");
                labelSelect.append($('<option/>').attr('value', musician.Id).text(musician.StageName));
                $("#YearFrom").val("");
                $("#YearTo").val("");
            });
        });
    });
    $(function () {
        $("#SelectedMusicians").dblclick(function () {
            var selectedValue = $(this).val();
            $(this).find("option:selected").remove();
            $.getJSON('@Url.Action("RemoveMusician")', { musicianId: parseInt(selectedValue) }, function () {
            }).error(function (jqXHR) {
                alert(jqXHR.responseText);
            });
        });
    });
    $(function () {
        $("#AddActivity").click(function () {
            var selectedValue = $("#MusicianId").find("option:selected").val();
            var bandId = $("#Id").val();
            var yearFrom = $("#YearFrom").val();
            var yearTo = $("#YearTo").val();
            //var activity = yearFrom + " - " + yearTo;
            var validationText = "";
            var validation = true;
            if (selectedValue == "") {
                validationText = "Musician is not selected!";
                validation = false;
            }
            if (validation) {
                if (yearFrom == "") {
                    validationText = "From Year is not selected!";
                    validation = false;
                } else {
                    if (!$.isNumeric(yearFrom)) {
                        validationText = "From Year must be a Numeric!";
                        validation = false;
                    }
                    if (yearFrom > (new Date).getFullYear()) {
                        validationText = "From Year can't be larger than Current Year!";
                        validation = false;
                    }
                }
            }
            if (validation) {
                if (yearTo == "") {
                    validationText = "To Year is not selected!";
                    validation = false;
                } else {
                    if (yearTo != "present") {
                        if (!$.isNumeric(yearTo)) {
                            validationText = "To Year must be a Numeric!";
                            validation = false;
                        }
                        if (yearFrom > yearTo) {
                            validationText = "To Year must be larger than From Year!";
                            validation = false;
                        }
                    }
                }
            }
            if (validation) {
                $.getJSON('@Url.Action("GetActivity")', { musicianId: parseInt(selectedValue), yearFrom: yearFrom, yearTo: yearTo, bandId: parseInt(bandId) }, function (musicianActivity) {
                    var activitySelect = $("#MusicianActivity");
                    if (musicianActivity.Activity != "") {
                        activitySelect.append($('<option/>').attr('value', musicianActivity.MusicianId).text(musicianActivity.Activity));
                        $("#YearFrom").val("");
                        $("#YearTo").val("");
                    } else {
                        alert("Activity for Musician: " + musicianActivity.MusicianStageName + " already exists!");
                    }
                }).error(function (jqXHR) {
                    alert(jqXHR.responseText);
                });
            }

            if (!validation) {
                alert(validationText);
                return false;
            }
            return true;
        });
    });
    $(function () {
        $("#MusicianActivity").dblclick(function () {
            var selectedValue = $(this).val();
            var activity = $(this).find("option:selected").text();
            alert(activity);
            $(this).find("option:selected").remove();
            $.getJSON('@Url.Action("RemoveActivity")', { musicianId: parseInt(selectedValue), activity: activity }, function () {
            }).error(function (jqXHR) {
                alert(jqXHR.responseText);
            });
        });
    });
</script>